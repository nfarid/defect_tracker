
// This file is generated by drogon_ctl
// Some custom methods are added

#pragma once
#include "../util/coroutine.hpp"

#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#include <drogon/utils/coroutine.h>
#endif  // ifdef __cpp_impl_coroutine
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>


namespace drogon
{


namespace orm
{


class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;


}  // namespace orm


}  // namespace drogon


namespace drogon_model
{


namespace bug_tracker
{


class Account;
class Comment;
class Project;

class Ticket{
public:  // Added custom methods

    /**
     * @brief validates the data from the POST parameter
     * @param orm - the objectâ€“relational mapper for Ticket
     * @param postParams - the data obtain from the POST request
     * @param reporterId - the id of the current user
     * @param projectId - the id of the project
     * @return a newly created Ticket if the data is valid
     * @throws Util::FormError if the data is invalid
     */
    static drogon::Task<Ticket> createTicket(drogon::orm::CoroMapper<Ticket>& orm,
            const std::unordered_map<std::string, std::string>& postParams,
            int32_t reporterId, int32_t projectId);

    /**
     * @brief return a list of all the severities as JSON
     */
    static Json::Value getSeverityLst();

    /**
     * @brief return a list of all the statuses as JSON
     */
    static Json::Value getStatusLst();

    /**
     * @brief obtain the reporter of this project
     */
    drogon::Task<Account> getReporter(drogon::orm::DbClientPtr db) const;

    /**
     * @brief obtain the project of that this ticket belongs to
     */
    drogon::Task<Project> getProject(drogon::orm::DbClientPtr db) const;

    /**
     * @brief obtain a list of comments that this ticket has
     */
    drogon::Task<std::vector<Comment> > getComments(drogon::orm::DbClientPtr db) const;

    /**
     * @brief check if the current user can edit this ticket
     */
    drogon::Task<bool> canEdit(drogon::orm::DbClientPtr db, int32_t userId) const;

    /**
     * @brief check if the current user is the reporter of this ticket
     */
    bool isReporter(int32_t userId) const;

    /**
     * @brief obtain a list of users that the current user can assign this ticket to
     */
    drogon::Task<std::vector<Account> >getAssignables(drogon::orm::DbClientPtr db, int32_t userId) const;

public:  // Generated custom method
    struct Cols{
        static const std::string _id;
        static const std::string _title;
        static const std::string _description;
        static const std::string _status;
        static const std::string _severity;
        static const std::string _created_date;
        static const std::string _resolved_date;
        static const std::string _image_filename;
        static const std::string _reporter_id;
        static const std::string _assigned_id;
        static const std::string _project_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType& getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Ticket(const drogon::orm::Row& r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Ticket(const Json::Value& pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Ticket(const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false);

    Ticket() = default;

    void updateByJson(const Json::Value& pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value& pJson,
            const std::vector<std::string>& pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value& pJson, std::string& err);
    static bool validateMasqueradedJsonForCreation(const Json::Value&,
            const std::vector<std::string>& pMasqueradingVector,
            std::string& err);
    static bool validateJsonForUpdate(const Json::Value& pJson, std::string& err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value&,
            const std::vector<std::string>& pMasqueradingVector,
            std::string& err);
    static bool validJsonOfField(size_t index,
            const std::string& fieldName,
            const Json::Value& pJson,
            std::string& err,
            bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t& getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t>& getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t& pId) noexcept;

    /**  For column title  */
    ///Get the value of the column title, returns the default value if the column is null
    const std::string& getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string>& getTitle() const noexcept;
    ///Set the value of the column title
    void setTitle(const std::string& pTitle) noexcept;
    void setTitle(std::string&& pTitle) noexcept;

    /**  For column description  */
    ///Get the value of the column description, returns the default value if the column is null
    const std::string& getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string>& getDescription() const noexcept;
    ///Set the value of the column description
    void setDescription(const std::string& pDescription) noexcept;
    void setDescription(std::string&& pDescription) noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string& getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string>& getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string& pStatus) noexcept;
    void setStatus(std::string&& pStatus) noexcept;

    /**  For column severity  */
    ///Get the value of the column severity, returns the default value if the column is null
    const std::string& getValueOfSeverity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string>& getSeverity() const noexcept;
    ///Set the value of the column severity
    void setSeverity(const std::string& pSeverity) noexcept;
    void setSeverity(std::string&& pSeverity) noexcept;

    /**  For column created_date  */
    ///Get the value of the column created_date, returns the default value if the column is null
    const trantor::Date& getValueOfCreatedDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<trantor::Date>& getCreatedDate() const noexcept;
    ///Set the value of the column created_date
    void setCreatedDate(const trantor::Date& pCreatedDate) noexcept;

    /**  For column resolved_date  */
    ///Get the value of the column resolved_date, returns the default value if the column is null
    const trantor::Date& getValueOfResolvedDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<trantor::Date>& getResolvedDate() const noexcept;
    ///Set the value of the column resolved_date
    void setResolvedDate(const trantor::Date& pResolvedDate) noexcept;
    void setResolvedDateToNull() noexcept;

    /**  For column image_filename  */
    ///Get the value of the column image_filename, returns the default value if the column is null
    const std::string& getValueOfImageFilename() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string>& getImageFilename() const noexcept;
    ///Set the value of the column image_filename
    void setImageFilename(const std::string& pImageFilename) noexcept;
    void setImageFilename(std::string&& pImageFilename) noexcept;
    void setImageFilenameToNull() noexcept;

    /**  For column reporter_id  */
    ///Get the value of the column reporter_id, returns the default value if the column is null
    const int32_t& getValueOfReporterId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t>& getReporterId() const noexcept;
    ///Set the value of the column reporter_id
    void setReporterId(const int32_t& pReporterId) noexcept;

    /**  For column assigned_id  */
    ///Get the value of the column assigned_id, returns the default value if the column is null
    const int32_t& getValueOfAssignedId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t>& getAssignedId() const noexcept;
    ///Set the value of the column assigned_id
    void setAssignedId(const int32_t& pAssignedId) noexcept;
    void setAssignedIdToNull() noexcept;

    /**  For column project_id  */
    ///Get the value of the column project_id, returns the default value if the column is null
    const int32_t& getValueOfProjectId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t>& getProjectId() const noexcept;
    ///Set the value of the column project_id
    void setProjectId(const int32_t& pProjectId) noexcept;


    static size_t getColumnNumber() noexcept {
        return 11;
    }

    static const std::string& getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector) const;
    /// Relationship interfaces
    void getProject(const drogon::orm::DbClientPtr& clientPtr,
            const std::function<void(Project)>& rcb,
            const drogon::orm::ExceptionCallback& ecb) const;
    void getComments(const drogon::orm::DbClientPtr& clientPtr,
            const std::function<void(std::vector<Comment>)>& rcb,
            const drogon::orm::ExceptionCallback& ecb) const;
    void getReporter(const drogon::orm::DbClientPtr& clientPtr,
            const std::function<void(Account)>& rcb,
            const drogon::orm::ExceptionCallback& ecb) const;

private:
    friend drogon::orm::Mapper<Ticket>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Ticket>;
#endif  // ifdef __cpp_impl_coroutine
    static const std::vector<std::string>& insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder& binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder& binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<std::string> severity_;
    std::shared_ptr<trantor::Date> createdDate_;
    std::shared_ptr<trantor::Date> resolvedDate_;
    std::shared_ptr<std::string> imageFilename_;
    std::shared_ptr<int32_t> reporterId_;
    std::shared_ptr<int32_t> assignedId_;
    std::shared_ptr<int32_t> projectId_;
    struct MetaData{
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[11]={ false};

public:
    static const std::string& sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;
    }

    static const std::string& sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;
    }

    std::string sqlForInserting(bool& needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        sql += "id,";
        ++parametersCount;
        if(dirtyFlag_[1]) {
            sql += "title,";
            ++parametersCount;
        }
        if(dirtyFlag_[2]) {
            sql += "description,";
            ++parametersCount;
        }
        if(dirtyFlag_[3]) {
            sql += "status,";
            ++parametersCount;
        }
        if(dirtyFlag_[4]) {
            sql += "severity,";
            ++parametersCount;
        }
        if(dirtyFlag_[5]) {
            sql += "created_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[6]) {
            sql += "resolved_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[7]) {
            sql += "image_filename,";
            ++parametersCount;
        }
        if(dirtyFlag_[8]) {
            sql += "reporter_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[9]) {
            sql += "assigned_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[10]) {
            sql += "project_id,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0) {
            sql[sql.length()-1]=')';
            sql += " values (";
        } else {
            sql += ") values (";
        }

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10]) {
            n = sprintf(placeholderStr, "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
            sql.resize(sql.length() - 1);
        if(needSelection)
            sql.append(") returning *");
        else
            sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};


}  // namespace bug_tracker


}  // namespace drogon_model

namespace Model = drogon_model::bug_tracker;
