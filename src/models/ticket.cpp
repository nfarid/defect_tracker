
// This file is generated by drogon_ctl

#include "./ticket.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::bug_tracker;

const std::string Ticket::Cols::_id = "id";
const std::string Ticket::Cols::_title = "title";
const std::string Ticket::Cols::_descr = "descr";
const std::string Ticket::Cols::_project_module = "project_module";
const std::string Ticket::Cols::_ticket_status = "ticket_status";
const std::string Ticket::Cols::_severity = "severity";
const std::string Ticket::Cols::_assigned = "assigned";
const std::string Ticket::primaryKeyName = "id";
const bool Ticket::hasPrimaryKey = true;
const std::string Ticket::tableName = "ticket";

const std::vector<typename Ticket::MetaData> Ticket::metaData_={
    {"id", "int32_t", "integer", 4, true, true, true},
    {"title", "std::string", "text", 0, false, false, true},
    {"descr", "std::string", "text", 0, false, false, true},
    {"project_module", "std::string", "text", 0, false, false, false},
    {"ticket_status", "std::string", "USER-DEFINED", 0, false, false, true},
    {"severity", "std::string", "USER-DEFINED", 0, false, false, true},
    {"assigned", "int32_t", "integer", 4, false, false, false}
};
const std::string& Ticket::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size() );
    return metaData_[index].colName_;
}

Ticket::Ticket(const Row& r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0) {
        if(!r["id"].isNull() )
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>() );
        if(!r["title"].isNull() )
            title_=std::make_shared<std::string>(r["title"].as<std::string>() );
        if(!r["descr"].isNull() )
            descr_=std::make_shared<std::string>(r["descr"].as<std::string>() );
        if(!r["project_module"].isNull() )
            projectModule_=std::make_shared<std::string>(r["project_module"].as<std::string>() );
        if(!r["ticket_status"].isNull() )
            ticketStatus_=std::make_shared<std::string>(r["ticket_status"].as<std::string>() );
        if(!r["severity"].isNull() )
            severity_=std::make_shared<std::string>(r["severity"].as<std::string>() );
        if(!r["assigned"].isNull() )
            assigned_=std::make_shared<int32_t>(r["assigned"].as<int32_t>() );
    } else {
        size_t offset = static_cast<size_t>(indexOffset);
        if(offset + 7 > r.size() ) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull() )
            id_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 1;
        if(!r[index].isNull() )
            title_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 2;
        if(!r[index].isNull() )
            descr_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 3;
        if(!r[index].isNull() )
            projectModule_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 4;
        if(!r[index].isNull() )
            ticketStatus_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 5;
        if(!r[index].isNull() )
            severity_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 6;
        if(!r[index].isNull() )
            assigned_=std::make_shared<int32_t>(r[index].as<int32_t>() );
    }
}

Ticket::Ticket(const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[0]].asInt64() ) );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            descr_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull() )
            projectModule_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString() );
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull() )
            ticketStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString() );
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull() )
            severity_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString() );
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull() )
            assigned_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[6]].asInt64() ) );
    }
}

Ticket::Ticket(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["id"].asInt64() ) );
    }
    if(pJson.isMember("title") ) {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull() )
            title_=std::make_shared<std::string>(pJson["title"].asString() );
    }
    if(pJson.isMember("descr") ) {
        dirtyFlag_[2]=true;
        if(!pJson["descr"].isNull() )
            descr_=std::make_shared<std::string>(pJson["descr"].asString() );
    }
    if(pJson.isMember("project_module") ) {
        dirtyFlag_[3]=true;
        if(!pJson["project_module"].isNull() )
            projectModule_=std::make_shared<std::string>(pJson["project_module"].asString() );
    }
    if(pJson.isMember("ticket_status") ) {
        dirtyFlag_[4]=true;
        if(!pJson["ticket_status"].isNull() )
            ticketStatus_=std::make_shared<std::string>(pJson["ticket_status"].asString() );
    }
    if(pJson.isMember("severity") ) {
        dirtyFlag_[5]=true;
        if(!pJson["severity"].isNull() )
            severity_=std::make_shared<std::string>(pJson["severity"].asString() );
    }
    if(pJson.isMember("assigned") ) {
        dirtyFlag_[6]=true;
        if(!pJson["assigned"].isNull() )
            assigned_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["assigned"].asInt64() ) );
    }
}

void Ticket::updateByMasqueradedJson(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[0]].asInt64() ) );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            descr_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull() )
            projectModule_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString() );
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull() )
            ticketStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString() );
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull() )
            severity_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString() );
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull() )
            assigned_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[6]].asInt64() ) );
    }
}

void Ticket::updateByJson(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["id"].asInt64() ) );
    }
    if(pJson.isMember("title") ) {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull() )
            title_=std::make_shared<std::string>(pJson["title"].asString() );
    }
    if(pJson.isMember("descr") ) {
        dirtyFlag_[2] = true;
        if(!pJson["descr"].isNull() )
            descr_=std::make_shared<std::string>(pJson["descr"].asString() );
    }
    if(pJson.isMember("project_module") ) {
        dirtyFlag_[3] = true;
        if(!pJson["project_module"].isNull() )
            projectModule_=std::make_shared<std::string>(pJson["project_module"].asString() );
    }
    if(pJson.isMember("ticket_status") ) {
        dirtyFlag_[4] = true;
        if(!pJson["ticket_status"].isNull() )
            ticketStatus_=std::make_shared<std::string>(pJson["ticket_status"].asString() );
    }
    if(pJson.isMember("severity") ) {
        dirtyFlag_[5] = true;
        if(!pJson["severity"].isNull() )
            severity_=std::make_shared<std::string>(pJson["severity"].asString() );
    }
    if(pJson.isMember("assigned") ) {
        dirtyFlag_[6] = true;
        if(!pJson["assigned"].isNull() )
            assigned_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["assigned"].asInt64() ) );
    }
}

const int32_t& Ticket::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getId() const noexcept
{
    return id_;
}

void Ticket::setId(const int32_t& pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const typename Ticket::PrimaryKeyType& Ticket::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string& Ticket::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getTitle() const noexcept
{
    return title_;
}

void Ticket::setTitle(const std::string& pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}

void Ticket::setTitle(std::string&& pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle) );
    dirtyFlag_[1] = true;
}

const std::string& Ticket::getValueOfDescr() const noexcept
{
    const static std::string defaultValue = std::string();
    if(descr_)
        return *descr_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getDescr() const noexcept
{
    return descr_;
}

void Ticket::setDescr(const std::string& pDescr) noexcept
{
    descr_ = std::make_shared<std::string>(pDescr);
    dirtyFlag_[2] = true;
}

void Ticket::setDescr(std::string&& pDescr) noexcept
{
    descr_ = std::make_shared<std::string>(std::move(pDescr) );
    dirtyFlag_[2] = true;
}

const std::string& Ticket::getValueOfProjectModule() const noexcept
{
    const static std::string defaultValue = std::string();
    if(projectModule_)
        return *projectModule_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getProjectModule() const noexcept
{
    return projectModule_;
}

void Ticket::setProjectModule(const std::string& pProjectModule) noexcept
{
    projectModule_ = std::make_shared<std::string>(pProjectModule);
    dirtyFlag_[3] = true;
}

void Ticket::setProjectModule(std::string&& pProjectModule) noexcept
{
    projectModule_ = std::make_shared<std::string>(std::move(pProjectModule) );
    dirtyFlag_[3] = true;
}

void Ticket::setProjectModuleToNull() noexcept
{
    projectModule_.reset();
    dirtyFlag_[3] = true;
}

const std::string& Ticket::getValueOfTicketStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ticketStatus_)
        return *ticketStatus_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getTicketStatus() const noexcept
{
    return ticketStatus_;
}

void Ticket::setTicketStatus(const std::string& pTicketStatus) noexcept
{
    ticketStatus_ = std::make_shared<std::string>(pTicketStatus);
    dirtyFlag_[4] = true;
}

void Ticket::setTicketStatus(std::string&& pTicketStatus) noexcept
{
    ticketStatus_ = std::make_shared<std::string>(std::move(pTicketStatus) );
    dirtyFlag_[4] = true;
}

const std::string& Ticket::getValueOfSeverity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(severity_)
        return *severity_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getSeverity() const noexcept
{
    return severity_;
}

void Ticket::setSeverity(const std::string& pSeverity) noexcept
{
    severity_ = std::make_shared<std::string>(pSeverity);
    dirtyFlag_[5] = true;
}

void Ticket::setSeverity(std::string&& pSeverity) noexcept
{
    severity_ = std::make_shared<std::string>(std::move(pSeverity) );
    dirtyFlag_[5] = true;
}

const int32_t& Ticket::getValueOfAssigned() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(assigned_)
        return *assigned_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getAssigned() const noexcept
{
    return assigned_;
}

void Ticket::setAssigned(const int32_t& pAssigned) noexcept
{
    assigned_ = std::make_shared<int32_t>(pAssigned);
    dirtyFlag_[6] = true;
}

void Ticket::setAssignedToNull() noexcept
{
    assigned_.reset();
    dirtyFlag_[6] = true;
}

void Ticket::updateId(const uint64_t)
{}

const std::vector<std::string>& Ticket::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "title",
        "descr",
        "project_module",
        "ticket_status",
        "severity",
        "assigned"
    };
    return inCols;
}

void Ticket::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getTitle() )
            binder << getValueOfTitle();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getDescr() )
            binder << getValueOfDescr();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[3]) {
        if(getProjectModule() )
            binder << getValueOfProjectModule();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[4]) {
        if(getTicketStatus() )
            binder << getValueOfTicketStatus();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[5]) {
        if(getSeverity() )
            binder << getValueOfSeverity();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[6]) {
        if(getAssigned() )
            binder << getValueOfAssigned();
        else
            binder << nullptr;
    }
}

const std::vector<std::string> Ticket::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
        ret.push_back(getColumnName(1) );
    if(dirtyFlag_[2])
        ret.push_back(getColumnName(2) );
    if(dirtyFlag_[3])
        ret.push_back(getColumnName(3) );
    if(dirtyFlag_[4])
        ret.push_back(getColumnName(4) );
    if(dirtyFlag_[5])
        ret.push_back(getColumnName(5) );
    if(dirtyFlag_[6])
        ret.push_back(getColumnName(6) );
    return ret;
}

void Ticket::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getTitle() )
            binder << getValueOfTitle();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getDescr() )
            binder << getValueOfDescr();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[3]) {
        if(getProjectModule() )
            binder << getValueOfProjectModule();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[4]) {
        if(getTicketStatus() )
            binder << getValueOfTicketStatus();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[5]) {
        if(getSeverity() )
            binder << getValueOfSeverity();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[6]) {
        if(getAssigned() )
            binder << getValueOfAssigned();
        else
            binder << nullptr;
    }
}

Json::Value Ticket::toJson() const
{
    Json::Value ret;
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getTitle() )
        ret["title"]=getValueOfTitle();
    else
        ret["title"]=Json::Value();
    if(getDescr() )
        ret["descr"]=getValueOfDescr();
    else
        ret["descr"]=Json::Value();
    if(getProjectModule() )
        ret["project_module"]=getValueOfProjectModule();
    else
        ret["project_module"]=Json::Value();
    if(getTicketStatus() )
        ret["ticket_status"]=getValueOfTicketStatus();
    else
        ret["ticket_status"]=Json::Value();
    if(getSeverity() )
        ret["severity"]=getValueOfSeverity();
    else
        ret["severity"]=Json::Value();
    if(getAssigned() )
        ret["assigned"]=getValueOfAssigned();
    else
        ret["assigned"]=Json::Value();
    return ret;
}

Json::Value Ticket::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7) {
        if(!pMasqueradingVector[0].empty() ) {
            if(getId() )
                ret[pMasqueradingVector[0]]=getValueOfId();
            else
                ret[pMasqueradingVector[0]]=Json::Value();
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(getTitle() )
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            else
                ret[pMasqueradingVector[1]]=Json::Value();
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(getDescr() )
                ret[pMasqueradingVector[2]]=getValueOfDescr();
            else
                ret[pMasqueradingVector[2]]=Json::Value();
        }
        if(!pMasqueradingVector[3].empty() ) {
            if(getProjectModule() )
                ret[pMasqueradingVector[3]]=getValueOfProjectModule();
            else
                ret[pMasqueradingVector[3]]=Json::Value();
        }
        if(!pMasqueradingVector[4].empty() ) {
            if(getTicketStatus() )
                ret[pMasqueradingVector[4]]=getValueOfTicketStatus();
            else
                ret[pMasqueradingVector[4]]=Json::Value();
        }
        if(!pMasqueradingVector[5].empty() ) {
            if(getSeverity() )
                ret[pMasqueradingVector[5]]=getValueOfSeverity();
            else
                ret[pMasqueradingVector[5]]=Json::Value();
        }
        if(!pMasqueradingVector[6].empty() ) {
            if(getAssigned() )
                ret[pMasqueradingVector[6]]=getValueOfAssigned();
            else
                ret[pMasqueradingVector[6]]=Json::Value();
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getTitle() )
        ret["title"]=getValueOfTitle();
    else
        ret["title"]=Json::Value();
    if(getDescr() )
        ret["descr"]=getValueOfDescr();
    else
        ret["descr"]=Json::Value();
    if(getProjectModule() )
        ret["project_module"]=getValueOfProjectModule();
    else
        ret["project_module"]=Json::Value();
    if(getTicketStatus() )
        ret["ticket_status"]=getValueOfTicketStatus();
    else
        ret["ticket_status"]=Json::Value();
    if(getSeverity() )
        ret["severity"]=getValueOfSeverity();
    else
        ret["severity"]=Json::Value();
    if(getAssigned() )
        ret["assigned"]=getValueOfAssigned();
    else
        ret["assigned"]=Json::Value();
    return ret;
}

bool Ticket::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, true) )
            return false;
    }
    if(pJson.isMember("title") ) {
        if(!validJsonOfField(1, "title", pJson["title"], err, true) )
            return false;
    } else {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("descr") ) {
        if(!validJsonOfField(2, "descr", pJson["descr"], err, true) )
            return false;
    } else {
        err="The descr column cannot be null";
        return false;
    }
    if(pJson.isMember("project_module") ) {
        if(!validJsonOfField(3, "project_module", pJson["project_module"], err, true) )
            return false;
    }
    if(pJson.isMember("ticket_status") ) {
        if(!validJsonOfField(4, "ticket_status", pJson["ticket_status"], err, true) )
            return false;
    } else {
        err="The ticket_status column cannot be null";
        return false;
    }
    if(pJson.isMember("severity") ) {
        if(!validJsonOfField(5, "severity", pJson["severity"], err, true) )
            return false;
    } else {
        err="The severity column cannot be null";
        return false;
    }
    if(pJson.isMember("assigned") ) {
        if(!validJsonOfField(6, "assigned", pJson["assigned"], err, true) )
            return false;
    }
    return true;
}

bool Ticket::validateMasqueradedJsonForCreation(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 7) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() ) {
            if(pJson.isMember(pMasqueradingVector[0]) ) {
                if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(pJson.isMember(pMasqueradingVector[1]) ) {
                if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(pJson.isMember(pMasqueradingVector[2]) ) {
                if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[3].empty() ) {
            if(pJson.isMember(pMasqueradingVector[3]) ) {
                if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[4].empty() ) {
            if(pJson.isMember(pMasqueradingVector[4]) ) {
                if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[4] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[5].empty() ) {
            if(pJson.isMember(pMasqueradingVector[5]) ) {
                if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[5] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[6].empty() ) {
            if(pJson.isMember(pMasqueradingVector[6]) ) {
                if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true) )
                    return false;
            }
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Ticket::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, false) )
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title") ) {
        if(!validJsonOfField(1, "title", pJson["title"], err, false) )
            return false;
    }
    if(pJson.isMember("descr") ) {
        if(!validJsonOfField(2, "descr", pJson["descr"], err, false) )
            return false;
    }
    if(pJson.isMember("project_module") ) {
        if(!validJsonOfField(3, "project_module", pJson["project_module"], err, false) )
            return false;
    }
    if(pJson.isMember("ticket_status") ) {
        if(!validJsonOfField(4, "ticket_status", pJson["ticket_status"], err, false) )
            return false;
    }
    if(pJson.isMember("severity") ) {
        if(!validJsonOfField(5, "severity", pJson["severity"], err, false) )
            return false;
    }
    if(pJson.isMember("assigned") ) {
        if(!validJsonOfField(6, "assigned", pJson["assigned"], err, false) )
            return false;
    }
    return true;
}

bool Ticket::validateMasqueradedJsonForUpdate(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 7) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false) )
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false) )
                return false;
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Ticket::validJsonOfField(size_t index,
        const std::string& fieldName,
        const Json::Value& pJson,
        std::string& err,
        bool isForCreation)
{
    switch(index) {
    case 0:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(isForCreation) {
            err="The automatic primary key cannot be set";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 1:
    case 2:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 3:
        if(pJson.isNull() )
            return true;
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 4:
    case 5:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 6:
        if(pJson.isNull() )
            return true;
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;

    default:
        err="Internal error in the server";
        return false;
        break;
    }
    return true;
}
