
// This file is generated by drogon_ctl

#include "./account.hpp"
#include "./comment.hpp"
#include "./project.hpp"
#include "./staff.hpp"
#include "./ticket.hpp"

#include "../util/hash.hpp"

#include <drogon/utils/Utilities.h>

#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bug_tracker;

const std::string Account::Cols::_id = "id";
const std::string Account::Cols::_username = "username";
const std::string Account::Cols::_password_hash = "password_hash";
const std::string Account::primaryKeyName = "id";
const bool Account::hasPrimaryKey = true;
const std::string Account::tableName = "account";

const std::vector<typename Account::MetaData> Account::metaData_={
    {"id", "int32_t", "integer", 4, true, true, true},
    {"username", "std::string", "text", 0, false, false, true},
    {"password_hash", "std::string", "text", 0, false, false, true}
};

Task<Account> Account::verifyLogin(CoroMapper<Account>& orm,
        const std::unordered_map<std::string, std::string>& postParams)
{
    const std::string& username = postParams.at("form-username");
    const std::string password = postParams.at("form-password");

    const Criteria userCriteria{Model::Account::Cols::_username, CompareOperator::EQ, username};
    const Model::Account user = co_await orm.findOne(userCriteria);

    if(!Util::verifyHash(user.getValueOfPasswordHash(), password) )
        throw std::runtime_error("Form Error: Invalid password");

    co_return user;
}

Task<Account> Account::createAccount(CoroMapper<Account>& orm,
        const std::unordered_map<std::string, std::string>& postParams)
{
    const std::string& username = postParams.at("form-username");
    const std::string& password = postParams.at("form-password");

    // TODO: Add more requirements for a valid username & password
    if(username.empty() || password.empty() ) // Username or password should not be empty
        throw std::runtime_error("Form Error: Invalid username or password");

    Model::Account newAccount;
    newAccount.setUsername(username);
    newAccount.setPasswordHash(Util::hash(password) );

    co_return co_await orm.insert(newAccount);
}

const std::string& Account::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size() );
    return metaData_[index].colName_;
}

Account::Account(const Row& r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0) {
        if(!r["id"].isNull() )
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>() );
        if(!r["username"].isNull() )
            username_=std::make_shared<std::string>(r["username"].as<std::string>() );
        if(!r["password_hash"].isNull() )
            passwordHash_=std::make_shared<std::string>(r["password_hash"].as<std::string>() );
    } else{
        size_t offset = static_cast<size_t>(indexOffset);
        if(offset + 3 > r.size() ) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull() )
            id_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 1;
        if(!r[index].isNull() )
            username_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 2;
        if(!r[index].isNull() )
            passwordHash_=std::make_shared<std::string>(r[index].as<std::string>() );
    }
}

Account::Account(const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[0]].asInt64() ) );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            passwordHash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
}

Account::Account(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["id"].asInt64() ) );
    }
    if(pJson.isMember("username") ) {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull() )
            username_=std::make_shared<std::string>(pJson["username"].asString() );
    }
    if(pJson.isMember("password_hash") ) {
        dirtyFlag_[2]=true;
        if(!pJson["password_hash"].isNull() )
            passwordHash_=std::make_shared<std::string>(pJson["password_hash"].asString() );
    }
}

void Account::updateByMasqueradedJson(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson[pMasqueradingVector[0]].asInt64() ) );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            passwordHash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
}

void Account::updateByJson(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( static_cast<int32_t>(pJson["id"].asInt64() ) );
    }
    if(pJson.isMember("username") ) {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull() )
            username_=std::make_shared<std::string>(pJson["username"].asString() );
    }
    if(pJson.isMember("password_hash") ) {
        dirtyFlag_[2] = true;
        if(!pJson["password_hash"].isNull() )
            passwordHash_=std::make_shared<std::string>(pJson["password_hash"].asString() );
    }
}

const int32_t& Account::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Account::getId() const noexcept
{
    return id_;
}

void Account::setId(const int32_t& pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const typename Account::PrimaryKeyType& Account::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string& Account::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Account::getUsername() const noexcept
{
    return username_;
}

void Account::setUsername(const std::string& pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}

void Account::setUsername(std::string&& pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername) );
    dirtyFlag_[1] = true;
}

const std::string& Account::getValueOfPasswordHash() const noexcept
{
    const static std::string defaultValue = std::string();
    if(passwordHash_)
        return *passwordHash_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Account::getPasswordHash() const noexcept
{
    return passwordHash_;
}

void Account::setPasswordHash(const std::string& pPasswordHash) noexcept
{
    passwordHash_ = std::make_shared<std::string>(pPasswordHash);
    dirtyFlag_[2] = true;
}

void Account::setPasswordHash(std::string&& pPasswordHash) noexcept
{
    passwordHash_ = std::make_shared<std::string>(std::move(pPasswordHash) );
    dirtyFlag_[2] = true;
}

void Account::updateId(const uint64_t)
{}

const std::vector<std::string>& Account::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "username",
        "password_hash"
    };
    return inCols;
}

void Account::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getUsername() )
            binder << getValueOfUsername();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getPasswordHash() )
            binder << getValueOfPasswordHash();
        else
            binder << nullptr;
    }
}

const std::vector<std::string> Account::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
        ret.push_back(getColumnName(1) );
    if(dirtyFlag_[2])
        ret.push_back(getColumnName(2) );
    return ret;
}

void Account::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getUsername() )
            binder << getValueOfUsername();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getPasswordHash() )
            binder << getValueOfPasswordHash();
        else
            binder << nullptr;
    }
}

Json::Value Account::toJson() const
{
    Json::Value ret;
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getUsername() )
        ret["username"]=getValueOfUsername();
    else
        ret["username"]=Json::Value();
    return ret;
}

Json::Value Account::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3) {
        if(!pMasqueradingVector[0].empty() ) {
            if(getId() )
                ret[pMasqueradingVector[0]]=getValueOfId();
            else
                ret[pMasqueradingVector[0]]=Json::Value();
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(getUsername() )
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            else
                ret[pMasqueradingVector[1]]=Json::Value();
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(getPasswordHash() )
                ret[pMasqueradingVector[2]]=getValueOfPasswordHash();
            else
                ret[pMasqueradingVector[2]]=Json::Value();
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getUsername() )
        ret["username"]=getValueOfUsername();
    else
        ret["username"]=Json::Value();
    if(getPasswordHash() )
        ret["password_hash"]=getValueOfPasswordHash();
    else
        ret["password_hash"]=Json::Value();
    return ret;
}

bool Account::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, true) )
            return false;
    }
    if(pJson.isMember("username") ) {
        if(!validJsonOfField(1, "username", pJson["username"], err, true) )
            return false;
    } else{
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("password_hash") ) {
        if(!validJsonOfField(2, "password_hash", pJson["password_hash"], err, true) )
            return false;
    } else{
        err="The password_hash column cannot be null";
        return false;
    }
    return true;
}

bool Account::validateMasqueradedJsonForCreation(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 3) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() ) {
            if(pJson.isMember(pMasqueradingVector[0]) ) {
                if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(pJson.isMember(pMasqueradingVector[1]) ) {
                if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true) )
                    return false;
            } else{
                err="The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(pJson.isMember(pMasqueradingVector[2]) ) {
                if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true) )
                    return false;
            } else{
                err="The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Account::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, false) )
            return false;
    } else{
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("username") ) {
        if(!validJsonOfField(1, "username", pJson["username"], err, false) )
            return false;
    }
    if(pJson.isMember("password_hash") ) {
        if(!validJsonOfField(2, "password_hash", pJson["password_hash"], err, false) )
            return false;
    }
    return true;
}

bool Account::validateMasqueradedJsonForUpdate(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 3) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false) )
                return false;
        } else{
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false) )
                return false;
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Account::validJsonOfField(size_t index,
        const std::string& fieldName,
        const Json::Value& pJson,
        std::string& err,
        bool isForCreation)
{
    switch(index) {
    case 0:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(isForCreation) {
            err="The automatic primary key cannot be set";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 1:
    case 2:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    default:
        err="Internal error in the server";
        return false;
        break;
    }
    return true;
}

void Account::getProjects(const DbClientPtr& clientPtr,
        const std::function<void(std::vector<Project>)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from project where manager_id = $1";
    *clientPtr << sql
               << *id_
        >>[rcb = rcb](const Result& r){
        std::vector<Project> ret;
        ret.reserve(r.size() );
        for(auto const& row : r)
            ret.emplace_back(Project(row) );
        rcb(ret);
        }
        >> ecb;
}

void Account::getTickets(const DbClientPtr& clientPtr,
        const std::function<void(std::vector<Ticket>)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from ticket where reporter_id = $1";
    *clientPtr << sql
               << *id_
        >>[rcb = rcb](const Result& r){
        std::vector<Ticket> ret;
        ret.reserve(r.size() );
        for(auto const& row : r)
            ret.emplace_back(Ticket(row) );
        rcb(ret);
        }
        >> ecb;
}

void Account::getComments(const DbClientPtr& clientPtr,
        const std::function<void(std::vector<Comment>)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from comment where poster_id = $1";
    *clientPtr << sql
               << *id_
        >>[rcb = rcb](const Result& r){
        std::vector<Comment> ret;
        ret.reserve(r.size() );
        for(auto const& row : r)
            ret.emplace_back(Comment(row) );
        rcb(ret);
        }
        >> ecb;
}

void Account::getProjects(const DbClientPtr& clientPtr,
        const std::function<void(std::vector<std::pair<Project, Staff> >)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql =
            "select * from project,staff where staff.staff_id = $1 and staff.project_id = project.id";
    *clientPtr << sql
               << *id_
        >>[rcb = rcb](const Result& r){
        std::vector<std::pair<Project, Staff> > ret;
        ret.reserve(r.size() );
        for(auto const& row : r)
        {
            ret.emplace_back(std::pair<Project, Staff>(
                            Project(row), Staff(row, static_cast<ssize_t>(Project::getColumnNumber() ) ) ) );
        }
        rcb(ret);
        }
        >> ecb;
}
