
// This file is generated by drogon_ctl

#include "staff.hpp"

#include <drogon/utils/Utilities.h>

#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bug_tracker;

const std::string Staff::Cols::_id = "id";
const std::string Staff::Cols::_project_id = "project_id";
const std::string Staff::Cols::_staff_id = "staff_id";
const std::string Staff::primaryKeyName = "id";
const bool Staff::hasPrimaryKey = true;
const std::string Staff::tableName = "staff";

const std::vector<typename Staff::MetaData> Staff::metaData_={
    {"id", "int32_t", "integer", 4, 1, 1, 1},
    {"project_id", "int32_t", "integer", 4, 0, 0, 1},
    {"staff_id", "int32_t", "integer", 4, 0, 0, 1}
};
const std::string& Staff::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size() );
    return metaData_[index].colName_;
}

Staff::Staff(const Row& r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0) {
        if(!r["id"].isNull() )
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>() );
        if(!r["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>(r["project_id"].as<int32_t>() );
        if(!r["staff_id"].isNull() )
            staffId_=std::make_shared<int32_t>(r["staff_id"].as<int32_t>() );
    } else  {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size() ) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull() )
            id_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 1;
        if(!r[index].isNull() )
            projectId_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 2;
        if(!r[index].isNull() )
            staffId_=std::make_shared<int32_t>(r[index].as<int32_t>() );
    }
}

Staff::Staff(const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[0]].asInt64() );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[1]].asInt64() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            staffId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[2]].asInt64() );
    }
}

Staff::Staff(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson["id"].asInt64() );
    }
    if(pJson.isMember("project_id") ) {
        dirtyFlag_[1]=true;
        if(!pJson["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson["project_id"].asInt64() );
    }
    if(pJson.isMember("staff_id") ) {
        dirtyFlag_[2]=true;
        if(!pJson["staff_id"].isNull() )
            staffId_=std::make_shared<int32_t>( (int32_t)pJson["staff_id"].asInt64() );
    }
}

void Staff::updateByMasqueradedJson(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[0]].asInt64() );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[1]].asInt64() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            staffId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[2]].asInt64() );
    }
}

void Staff::updateByJson(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson["id"].asInt64() );
    }
    if(pJson.isMember("project_id") ) {
        dirtyFlag_[1] = true;
        if(!pJson["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson["project_id"].asInt64() );
    }
    if(pJson.isMember("staff_id") ) {
        dirtyFlag_[2] = true;
        if(!pJson["staff_id"].isNull() )
            staffId_=std::make_shared<int32_t>( (int32_t)pJson["staff_id"].asInt64() );
    }
}

const int32_t& Staff::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Staff::getId() const noexcept
{
    return id_;
}

void Staff::setId(const int32_t& pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const typename Staff::PrimaryKeyType& Staff::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t& Staff::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(projectId_)
        return *projectId_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Staff::getProjectId() const noexcept
{
    return projectId_;
}

void Staff::setProjectId(const int32_t& pProjectId) noexcept
{
    projectId_ = std::make_shared<int32_t>(pProjectId);
    dirtyFlag_[1] = true;
}

const int32_t& Staff::getValueOfStaffId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(staffId_)
        return *staffId_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Staff::getStaffId() const noexcept
{
    return staffId_;
}

void Staff::setStaffId(const int32_t& pStaffId) noexcept
{
    staffId_ = std::make_shared<int32_t>(pStaffId);
    dirtyFlag_[2] = true;
}

void Staff::updateId(const uint64_t id)
{}

const std::vector<std::string>& Staff::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "project_id",
        "staff_id"
    };
    return inCols;
}

void Staff::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getProjectId() )
            binder << getValueOfProjectId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getStaffId() )
            binder << getValueOfStaffId();
        else
            binder << nullptr;
    }
}

const std::vector<std::string> Staff::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
        ret.push_back(getColumnName(1) );
    if(dirtyFlag_[2])
        ret.push_back(getColumnName(2) );
    return ret;
}

void Staff::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getProjectId() )
            binder << getValueOfProjectId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getStaffId() )
            binder << getValueOfStaffId();
        else
            binder << nullptr;
    }
}

Json::Value Staff::toJson() const
{
    Json::Value ret;
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getProjectId() )
        ret["project_id"]=getValueOfProjectId();
    else
        ret["project_id"]=Json::Value();
    if(getStaffId() )
        ret["staff_id"]=getValueOfStaffId();
    else
        ret["staff_id"]=Json::Value();
    return ret;
}

Json::Value Staff::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3) {
        if(!pMasqueradingVector[0].empty() ) {
            if(getId() )
                ret[pMasqueradingVector[0]]=getValueOfId();
            else
                ret[pMasqueradingVector[0]]=Json::Value();
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(getProjectId() )
                ret[pMasqueradingVector[1]]=getValueOfProjectId();
            else
                ret[pMasqueradingVector[1]]=Json::Value();
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(getStaffId() )
                ret[pMasqueradingVector[2]]=getValueOfStaffId();
            else
                ret[pMasqueradingVector[2]]=Json::Value();
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getProjectId() )
        ret["project_id"]=getValueOfProjectId();
    else
        ret["project_id"]=Json::Value();
    if(getStaffId() )
        ret["staff_id"]=getValueOfStaffId();
    else
        ret["staff_id"]=Json::Value();
    return ret;
}

bool Staff::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, true) )
            return false;
    }
    if(pJson.isMember("project_id") ) {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, true) )
            return false;
    } else  {
        err="The project_id column cannot be null";
        return false;
    }
    if(pJson.isMember("staff_id") ) {
        if(!validJsonOfField(2, "staff_id", pJson["staff_id"], err, true) )
            return false;
    } else  {
        err="The staff_id column cannot be null";
        return false;
    }
    return true;
}

bool Staff::validateMasqueradedJsonForCreation(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 3) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() ) {
            if(pJson.isMember(pMasqueradingVector[0]) ) {
                if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(pJson.isMember(pMasqueradingVector[1]) ) {
                if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true) )
                    return false;
            } else    {
                err="The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(pJson.isMember(pMasqueradingVector[2]) ) {
                if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true) )
                    return false;
            } else    {
                err="The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Staff::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, false) )
            return false;
    } else  {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("project_id") ) {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, false) )
            return false;
    }
    if(pJson.isMember("staff_id") ) {
        if(!validJsonOfField(2, "staff_id", pJson["staff_id"], err, false) )
            return false;
    }
    return true;
}

bool Staff::validateMasqueradedJsonForUpdate(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 3) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false) )
                return false;
        } else    {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false) )
                return false;
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Staff::validJsonOfField(size_t index,
        const std::string& fieldName,
        const Json::Value& pJson,
        std::string& err,
        bool isForCreation)
{
    switch(index) {
    case 0:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(isForCreation) {
            err="The automatic primary key cannot be set";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 1:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 2:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    default:
        err="Internal error in the server";
        return false;
        break;
    }
    return true;
}
