
// This file is generated by drogon_ctl

#include "ticket.hpp"

#include "account.hpp"
#include "comment.hpp"
#include "project.hpp"

#include <drogon/utils/Utilities.h>

#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bug_tracker;

const std::string Ticket::Cols::_id = "id";
const std::string Ticket::Cols::_title = "title";
const std::string Ticket::Cols::_description = "description";
const std::string Ticket::Cols::_status = "status";
const std::string Ticket::Cols::_severity = "severity";
const std::string Ticket::Cols::_created_date = "created_date";
const std::string Ticket::Cols::_resolved_date = "resolved_date";
const std::string Ticket::Cols::_image_filename = "image_filename";
const std::string Ticket::Cols::_reporter_id = "reporter_id";
const std::string Ticket::Cols::_assigned_id = "assigned_id";
const std::string Ticket::Cols::_project_id = "project_id";
const std::string Ticket::primaryKeyName = "id";
const bool Ticket::hasPrimaryKey = true;
const std::string Ticket::tableName = "ticket";

const std::vector<typename Ticket::MetaData> Ticket::metaData_={
    {"id", "int32_t", "integer", 4, 1, 1, 1},
    {"title", "std::string", "text", 0, 0, 0, 1},
    {"description", "std::string", "text", 0, 0, 0, 1},
    {"status", "std::string", "USER-DEFINED", 0, 0, 0, 1},
    {"severity", "std::string", "USER-DEFINED", 0, 0, 0, 1},
    {"created_date", "trantor::Date", "timestamp without time zone", 0, 0, 0, 1},
    {"resolved_date", "trantor::Date", "timestamp without time zone", 0, 0, 0, 0},
    {"image_filename", "std::string", "text", 0, 0, 0, 0},
    {"reporter_id", "int32_t", "integer", 4, 0, 0, 1},
    {"assigned_id", "int32_t", "integer", 4, 0, 0, 0},
    {"project_id", "int32_t", "integer", 4, 0, 0, 1}
};
const std::string& Ticket::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size() );
    return metaData_[index].colName_;
}

Ticket::Ticket(const Row& r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0) {
        if(!r["id"].isNull() )
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>() );
        if(!r["title"].isNull() )
            title_=std::make_shared<std::string>(r["title"].as<std::string>() );
        if(!r["description"].isNull() )
            description_=std::make_shared<std::string>(r["description"].as<std::string>() );
        if(!r["status"].isNull() )
            status_=std::make_shared<std::string>(r["status"].as<std::string>() );
        if(!r["severity"].isNull() )
            severity_=std::make_shared<std::string>(r["severity"].as<std::string>() );
        if(!r["created_date"].isNull() ) {
            auto timeStr = r["created_date"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["resolved_date"].isNull() ) {
            auto timeStr = r["resolved_date"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["image_filename"].isNull() )
            imageFilename_=std::make_shared<std::string>(r["image_filename"].as<std::string>() );
        if(!r["reporter_id"].isNull() )
            reporterId_=std::make_shared<int32_t>(r["reporter_id"].as<int32_t>() );
        if(!r["assigned_id"].isNull() )
            assignedId_=std::make_shared<int32_t>(r["assigned_id"].as<int32_t>() );
        if(!r["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>(r["project_id"].as<int32_t>() );
    } else {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size() ) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull() )
            id_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 1;
        if(!r[index].isNull() )
            title_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 2;
        if(!r[index].isNull() )
            description_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 3;
        if(!r[index].isNull() )
            status_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 4;
        if(!r[index].isNull() )
            severity_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 5;
        if(!r[index].isNull() ) {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull() ) {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull() )
            imageFilename_=std::make_shared<std::string>(r[index].as<std::string>() );
        index = offset + 8;
        if(!r[index].isNull() )
            reporterId_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 9;
        if(!r[index].isNull() )
            assignedId_=std::make_shared<int32_t>(r[index].as<int32_t>() );
        index = offset + 10;
        if(!r[index].isNull() )
            projectId_=std::make_shared<int32_t>(r[index].as<int32_t>() );
    }
}

Ticket::Ticket(const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[0]].asInt64() );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull() )
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString() );
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull() )
            severity_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString() );
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull() ) {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull() ) {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]) ) {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull() )
            imageFilename_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString() );
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]) ) {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull() )
            reporterId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[8]].asInt64() );
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]) ) {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull() )
            assignedId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[9]].asInt64() );
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]) ) {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[10]].asInt64() );
    }
}

Ticket::Ticket(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson["id"].asInt64() );
    }
    if(pJson.isMember("title") ) {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull() )
            title_=std::make_shared<std::string>(pJson["title"].asString() );
    }
    if(pJson.isMember("description") ) {
        dirtyFlag_[2]=true;
        if(!pJson["description"].isNull() )
            description_=std::make_shared<std::string>(pJson["description"].asString() );
    }
    if(pJson.isMember("status") ) {
        dirtyFlag_[3]=true;
        if(!pJson["status"].isNull() )
            status_=std::make_shared<std::string>(pJson["status"].asString() );
    }
    if(pJson.isMember("severity") ) {
        dirtyFlag_[4]=true;
        if(!pJson["severity"].isNull() )
            severity_=std::make_shared<std::string>(pJson["severity"].asString() );
    }
    if(pJson.isMember("created_date") ) {
        dirtyFlag_[5]=true;
        if(!pJson["created_date"].isNull() ) {
            auto timeStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("resolved_date") ) {
        dirtyFlag_[6]=true;
        if(!pJson["resolved_date"].isNull() ) {
            auto timeStr = pJson["resolved_date"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("image_filename") ) {
        dirtyFlag_[7]=true;
        if(!pJson["image_filename"].isNull() )
            imageFilename_=std::make_shared<std::string>(pJson["image_filename"].asString() );
    }
    if(pJson.isMember("reporter_id") ) {
        dirtyFlag_[8]=true;
        if(!pJson["reporter_id"].isNull() )
            reporterId_=std::make_shared<int32_t>( (int32_t)pJson["reporter_id"].asInt64() );
    }
    if(pJson.isMember("assigned_id") ) {
        dirtyFlag_[9]=true;
        if(!pJson["assigned_id"].isNull() )
            assignedId_=std::make_shared<int32_t>( (int32_t)pJson["assigned_id"].asInt64() );
    }
    if(pJson.isMember("project_id") ) {
        dirtyFlag_[10]=true;
        if(!pJson["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson["project_id"].asInt64() );
    }
}

void Ticket::updateByMasqueradedJson(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
        if(!pJson[pMasqueradingVector[0]].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[0]].asInt64() );
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull() )
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString() );
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull() )
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString() );
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull() )
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString() );
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull() )
            severity_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString() );
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull() ) {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull() ) {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]) ) {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull() )
            imageFilename_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString() );
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]) ) {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull() )
            reporterId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[8]].asInt64() );
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]) ) {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull() )
            assignedId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[9]].asInt64() );
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]) ) {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson[pMasqueradingVector[10]].asInt64() );
    }
}

void Ticket::updateByJson(const Json::Value& pJson) noexcept(false)
{
    if(pJson.isMember("id") ) {
        if(!pJson["id"].isNull() )
            id_=std::make_shared<int32_t>( (int32_t)pJson["id"].asInt64() );
    }
    if(pJson.isMember("title") ) {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull() )
            title_=std::make_shared<std::string>(pJson["title"].asString() );
    }
    if(pJson.isMember("description") ) {
        dirtyFlag_[2] = true;
        if(!pJson["description"].isNull() )
            description_=std::make_shared<std::string>(pJson["description"].asString() );
    }
    if(pJson.isMember("status") ) {
        dirtyFlag_[3] = true;
        if(!pJson["status"].isNull() )
            status_=std::make_shared<std::string>(pJson["status"].asString() );
    }
    if(pJson.isMember("severity") ) {
        dirtyFlag_[4] = true;
        if(!pJson["severity"].isNull() )
            severity_=std::make_shared<std::string>(pJson["severity"].asString() );
    }
    if(pJson.isMember("created_date") ) {
        dirtyFlag_[5] = true;
        if(!pJson["created_date"].isNull() ) {
            auto timeStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                createdDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("resolved_date") ) {
        dirtyFlag_[6] = true;
        if(!pJson["resolved_date"].isNull() ) {
            auto timeStr = pJson["resolved_date"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm) );
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p) {
                if(*p=='.') {
                    std::string decimals(p+1, &timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                        decimals += "0";
                    decimalNum = (size_t)atol(decimals.c_str() );
                }
                resolvedDate_=std::make_shared<trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("image_filename") ) {
        dirtyFlag_[7] = true;
        if(!pJson["image_filename"].isNull() )
            imageFilename_=std::make_shared<std::string>(pJson["image_filename"].asString() );
    }
    if(pJson.isMember("reporter_id") ) {
        dirtyFlag_[8] = true;
        if(!pJson["reporter_id"].isNull() )
            reporterId_=std::make_shared<int32_t>( (int32_t)pJson["reporter_id"].asInt64() );
    }
    if(pJson.isMember("assigned_id") ) {
        dirtyFlag_[9] = true;
        if(!pJson["assigned_id"].isNull() )
            assignedId_=std::make_shared<int32_t>( (int32_t)pJson["assigned_id"].asInt64() );
    }
    if(pJson.isMember("project_id") ) {
        dirtyFlag_[10] = true;
        if(!pJson["project_id"].isNull() )
            projectId_=std::make_shared<int32_t>( (int32_t)pJson["project_id"].asInt64() );
    }
}

const int32_t& Ticket::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getId() const noexcept
{
    return id_;
}

void Ticket::setId(const int32_t& pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const typename Ticket::PrimaryKeyType& Ticket::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string& Ticket::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getTitle() const noexcept
{
    return title_;
}

void Ticket::setTitle(const std::string& pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}

void Ticket::setTitle(std::string&& pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle) );
    dirtyFlag_[1] = true;
}

const std::string& Ticket::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getDescription() const noexcept
{
    return description_;
}

void Ticket::setDescription(const std::string& pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}

void Ticket::setDescription(std::string&& pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription) );
    dirtyFlag_[2] = true;
}

const std::string& Ticket::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getStatus() const noexcept
{
    return status_;
}

void Ticket::setStatus(const std::string& pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[3] = true;
}

void Ticket::setStatus(std::string&& pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus) );
    dirtyFlag_[3] = true;
}

const std::string& Ticket::getValueOfSeverity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(severity_)
        return *severity_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getSeverity() const noexcept
{
    return severity_;
}

void Ticket::setSeverity(const std::string& pSeverity) noexcept
{
    severity_ = std::make_shared<std::string>(pSeverity);
    dirtyFlag_[4] = true;
}

void Ticket::setSeverity(std::string&& pSeverity) noexcept
{
    severity_ = std::make_shared<std::string>(std::move(pSeverity) );
    dirtyFlag_[4] = true;
}

const trantor::Date& Ticket::getValueOfCreatedDate() const noexcept
{
    const static trantor::Date defaultValue = trantor::Date();
    if(createdDate_)
        return *createdDate_;
    return defaultValue;
}

const std::shared_ptr<trantor::Date>& Ticket::getCreatedDate() const noexcept
{
    return createdDate_;
}

void Ticket::setCreatedDate(const trantor::Date& pCreatedDate) noexcept
{
    createdDate_ = std::make_shared<trantor::Date>(pCreatedDate);
    dirtyFlag_[5] = true;
}

const trantor::Date& Ticket::getValueOfResolvedDate() const noexcept
{
    const static trantor::Date defaultValue = trantor::Date();
    if(resolvedDate_)
        return *resolvedDate_;
    return defaultValue;
}

const std::shared_ptr<trantor::Date>& Ticket::getResolvedDate() const noexcept
{
    return resolvedDate_;
}

void Ticket::setResolvedDate(const trantor::Date& pResolvedDate) noexcept
{
    resolvedDate_ = std::make_shared<trantor::Date>(pResolvedDate);
    dirtyFlag_[6] = true;
}

void Ticket::setResolvedDateToNull() noexcept
{
    resolvedDate_.reset();
    dirtyFlag_[6] = true;
}

const std::string& Ticket::getValueOfImageFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(imageFilename_)
        return *imageFilename_;
    return defaultValue;
}

const std::shared_ptr<std::string>& Ticket::getImageFilename() const noexcept
{
    return imageFilename_;
}

void Ticket::setImageFilename(const std::string& pImageFilename) noexcept
{
    imageFilename_ = std::make_shared<std::string>(pImageFilename);
    dirtyFlag_[7] = true;
}

void Ticket::setImageFilename(std::string&& pImageFilename) noexcept
{
    imageFilename_ = std::make_shared<std::string>(std::move(pImageFilename) );
    dirtyFlag_[7] = true;
}

void Ticket::setImageFilenameToNull() noexcept
{
    imageFilename_.reset();
    dirtyFlag_[7] = true;
}

const int32_t& Ticket::getValueOfReporterId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(reporterId_)
        return *reporterId_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getReporterId() const noexcept
{
    return reporterId_;
}

void Ticket::setReporterId(const int32_t& pReporterId) noexcept
{
    reporterId_ = std::make_shared<int32_t>(pReporterId);
    dirtyFlag_[8] = true;
}

const int32_t& Ticket::getValueOfAssignedId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(assignedId_)
        return *assignedId_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getAssignedId() const noexcept
{
    return assignedId_;
}

void Ticket::setAssignedId(const int32_t& pAssignedId) noexcept
{
    assignedId_ = std::make_shared<int32_t>(pAssignedId);
    dirtyFlag_[9] = true;
}

void Ticket::setAssignedIdToNull() noexcept
{
    assignedId_.reset();
    dirtyFlag_[9] = true;
}

const int32_t& Ticket::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(projectId_)
        return *projectId_;
    return defaultValue;
}

const std::shared_ptr<int32_t>& Ticket::getProjectId() const noexcept
{
    return projectId_;
}

void Ticket::setProjectId(const int32_t& pProjectId) noexcept
{
    projectId_ = std::make_shared<int32_t>(pProjectId);
    dirtyFlag_[10] = true;
}

void Ticket::updateId(const uint64_t)
{}

const std::vector<std::string>& Ticket::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "title",
        "description",
        "status",
        "severity",
        "created_date",
        "resolved_date",
        "image_filename",
        "reporter_id",
        "assigned_id",
        "project_id"
    };
    return inCols;
}

void Ticket::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getTitle() )
            binder << getValueOfTitle();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getDescription() )
            binder << getValueOfDescription();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[3]) {
        if(getStatus() )
            binder << getValueOfStatus();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[4]) {
        if(getSeverity() )
            binder << getValueOfSeverity();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[5]) {
        if(getCreatedDate() )
            binder << getValueOfCreatedDate();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[6]) {
        if(getResolvedDate() )
            binder << getValueOfResolvedDate();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[7]) {
        if(getImageFilename() )
            binder << getValueOfImageFilename();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[8]) {
        if(getReporterId() )
            binder << getValueOfReporterId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[9]) {
        if(getAssignedId() )
            binder << getValueOfAssignedId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[10]) {
        if(getProjectId() )
            binder << getValueOfProjectId();
        else
            binder << nullptr;
    }
}

const std::vector<std::string> Ticket::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
        ret.push_back(getColumnName(1) );
    if(dirtyFlag_[2])
        ret.push_back(getColumnName(2) );
    if(dirtyFlag_[3])
        ret.push_back(getColumnName(3) );
    if(dirtyFlag_[4])
        ret.push_back(getColumnName(4) );
    if(dirtyFlag_[5])
        ret.push_back(getColumnName(5) );
    if(dirtyFlag_[6])
        ret.push_back(getColumnName(6) );
    if(dirtyFlag_[7])
        ret.push_back(getColumnName(7) );
    if(dirtyFlag_[8])
        ret.push_back(getColumnName(8) );
    if(dirtyFlag_[9])
        ret.push_back(getColumnName(9) );
    if(dirtyFlag_[10])
        ret.push_back(getColumnName(10) );
    return ret;
}

void Ticket::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if(dirtyFlag_[1]) {
        if(getTitle() )
            binder << getValueOfTitle();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[2]) {
        if(getDescription() )
            binder << getValueOfDescription();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[3]) {
        if(getStatus() )
            binder << getValueOfStatus();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[4]) {
        if(getSeverity() )
            binder << getValueOfSeverity();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[5]) {
        if(getCreatedDate() )
            binder << getValueOfCreatedDate();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[6]) {
        if(getResolvedDate() )
            binder << getValueOfResolvedDate();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[7]) {
        if(getImageFilename() )
            binder << getValueOfImageFilename();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[8]) {
        if(getReporterId() )
            binder << getValueOfReporterId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[9]) {
        if(getAssignedId() )
            binder << getValueOfAssignedId();
        else
            binder << nullptr;
    }
    if(dirtyFlag_[10]) {
        if(getProjectId() )
            binder << getValueOfProjectId();
        else
            binder << nullptr;
    }
}

Json::Value Ticket::toJson() const
{
    Json::Value ret;
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getTitle() )
        ret["title"]=getValueOfTitle();
    else
        ret["title"]=Json::Value();
    if(getDescription() )
        ret["description"]=getValueOfDescription();
    else
        ret["description"]=Json::Value();
    if(getStatus() )
        ret["status"]=getValueOfStatus();
    else
        ret["status"]=Json::Value();
    if(getSeverity() )
        ret["severity"]=getValueOfSeverity();
    else
        ret["severity"]=Json::Value();
    if(getCreatedDate() )
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    else
        ret["created_date"]=Json::Value();
    if(getResolvedDate() )
        ret["resolved_date"]=getResolvedDate()->toDbStringLocal();
    else
        ret["resolved_date"]=Json::Value();
    if(getImageFilename() )
        ret["image_filename"]=getValueOfImageFilename();
    else
        ret["image_filename"]=Json::Value();
    if(getReporterId() )
        ret["reporter_id"]=getValueOfReporterId();
    else
        ret["reporter_id"]=Json::Value();
    if(getAssignedId() )
        ret["assigned_id"]=getValueOfAssignedId();
    else
        ret["assigned_id"]=Json::Value();
    if(getProjectId() )
        ret["project_id"]=getValueOfProjectId();
    else
        ret["project_id"]=Json::Value();
    return ret;
}

Json::Value Ticket::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11) {
        if(!pMasqueradingVector[0].empty() ) {
            if(getId() )
                ret[pMasqueradingVector[0]]=getValueOfId();
            else
                ret[pMasqueradingVector[0]]=Json::Value();
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(getTitle() )
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            else
                ret[pMasqueradingVector[1]]=Json::Value();
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(getDescription() )
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            else
                ret[pMasqueradingVector[2]]=Json::Value();
        }
        if(!pMasqueradingVector[3].empty() ) {
            if(getStatus() )
                ret[pMasqueradingVector[3]]=getValueOfStatus();
            else
                ret[pMasqueradingVector[3]]=Json::Value();
        }
        if(!pMasqueradingVector[4].empty() ) {
            if(getSeverity() )
                ret[pMasqueradingVector[4]]=getValueOfSeverity();
            else
                ret[pMasqueradingVector[4]]=Json::Value();
        }
        if(!pMasqueradingVector[5].empty() ) {
            if(getCreatedDate() )
                ret[pMasqueradingVector[5]]=getCreatedDate()->toDbStringLocal();
            else
                ret[pMasqueradingVector[5]]=Json::Value();
        }
        if(!pMasqueradingVector[6].empty() ) {
            if(getResolvedDate() )
                ret[pMasqueradingVector[6]]=getResolvedDate()->toDbStringLocal();
            else
                ret[pMasqueradingVector[6]]=Json::Value();
        }
        if(!pMasqueradingVector[7].empty() ) {
            if(getImageFilename() )
                ret[pMasqueradingVector[7]]=getValueOfImageFilename();
            else
                ret[pMasqueradingVector[7]]=Json::Value();
        }
        if(!pMasqueradingVector[8].empty() ) {
            if(getReporterId() )
                ret[pMasqueradingVector[8]]=getValueOfReporterId();
            else
                ret[pMasqueradingVector[8]]=Json::Value();
        }
        if(!pMasqueradingVector[9].empty() ) {
            if(getAssignedId() )
                ret[pMasqueradingVector[9]]=getValueOfAssignedId();
            else
                ret[pMasqueradingVector[9]]=Json::Value();
        }
        if(!pMasqueradingVector[10].empty() ) {
            if(getProjectId() )
                ret[pMasqueradingVector[10]]=getValueOfProjectId();
            else
                ret[pMasqueradingVector[10]]=Json::Value();
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId() )
        ret["id"]=getValueOfId();
    else
        ret["id"]=Json::Value();
    if(getTitle() )
        ret["title"]=getValueOfTitle();
    else
        ret["title"]=Json::Value();
    if(getDescription() )
        ret["description"]=getValueOfDescription();
    else
        ret["description"]=Json::Value();
    if(getStatus() )
        ret["status"]=getValueOfStatus();
    else
        ret["status"]=Json::Value();
    if(getSeverity() )
        ret["severity"]=getValueOfSeverity();
    else
        ret["severity"]=Json::Value();
    if(getCreatedDate() )
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    else
        ret["created_date"]=Json::Value();
    if(getResolvedDate() )
        ret["resolved_date"]=getResolvedDate()->toDbStringLocal();
    else
        ret["resolved_date"]=Json::Value();
    if(getImageFilename() )
        ret["image_filename"]=getValueOfImageFilename();
    else
        ret["image_filename"]=Json::Value();
    if(getReporterId() )
        ret["reporter_id"]=getValueOfReporterId();
    else
        ret["reporter_id"]=Json::Value();
    if(getAssignedId() )
        ret["assigned_id"]=getValueOfAssignedId();
    else
        ret["assigned_id"]=Json::Value();
    if(getProjectId() )
        ret["project_id"]=getValueOfProjectId();
    else
        ret["project_id"]=Json::Value();
    return ret;
}

bool Ticket::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, true) )
            return false;
    }
    if(pJson.isMember("title") ) {
        if(!validJsonOfField(1, "title", pJson["title"], err, true) )
            return false;
    } else {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("description") ) {
        if(!validJsonOfField(2, "description", pJson["description"], err, true) )
            return false;
    } else {
        err="The description column cannot be null";
        return false;
    }
    if(pJson.isMember("status") ) {
        if(!validJsonOfField(3, "status", pJson["status"], err, true) )
            return false;
    } else {
        err="The status column cannot be null";
        return false;
    }
    if(pJson.isMember("severity") ) {
        if(!validJsonOfField(4, "severity", pJson["severity"], err, true) )
            return false;
    } else {
        err="The severity column cannot be null";
        return false;
    }
    if(pJson.isMember("created_date") ) {
        if(!validJsonOfField(5, "created_date", pJson["created_date"], err, true) )
            return false;
    } else {
        err="The created_date column cannot be null";
        return false;
    }
    if(pJson.isMember("resolved_date") ) {
        if(!validJsonOfField(6, "resolved_date", pJson["resolved_date"], err, true) )
            return false;
    }
    if(pJson.isMember("image_filename") ) {
        if(!validJsonOfField(7, "image_filename", pJson["image_filename"], err, true) )
            return false;
    }
    if(pJson.isMember("reporter_id") ) {
        if(!validJsonOfField(8, "reporter_id", pJson["reporter_id"], err, true) )
            return false;
    } else {
        err="The reporter_id column cannot be null";
        return false;
    }
    if(pJson.isMember("assigned_id") ) {
        if(!validJsonOfField(9, "assigned_id", pJson["assigned_id"], err, true) )
            return false;
    }
    if(pJson.isMember("project_id") ) {
        if(!validJsonOfField(10, "project_id", pJson["project_id"], err, true) )
            return false;
    } else {
        err="The project_id column cannot be null";
        return false;
    }
    return true;
}

bool Ticket::validateMasqueradedJsonForCreation(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 11) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() ) {
            if(pJson.isMember(pMasqueradingVector[0]) ) {
                if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[1].empty() ) {
            if(pJson.isMember(pMasqueradingVector[1]) ) {
                if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[2].empty() ) {
            if(pJson.isMember(pMasqueradingVector[2]) ) {
                if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[3].empty() ) {
            if(pJson.isMember(pMasqueradingVector[3]) ) {
                if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[4].empty() ) {
            if(pJson.isMember(pMasqueradingVector[4]) ) {
                if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[4] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[5].empty() ) {
            if(pJson.isMember(pMasqueradingVector[5]) ) {
                if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[5] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[6].empty() ) {
            if(pJson.isMember(pMasqueradingVector[6]) ) {
                if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[7].empty() ) {
            if(pJson.isMember(pMasqueradingVector[7]) ) {
                if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[8].empty() ) {
            if(pJson.isMember(pMasqueradingVector[8]) ) {
                if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[8] + " column cannot be null";
                return false;
            }
        }
        if(!pMasqueradingVector[9].empty() ) {
            if(pJson.isMember(pMasqueradingVector[9]) ) {
                if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true) )
                    return false;
            }
        }
        if(!pMasqueradingVector[10].empty() ) {
            if(pJson.isMember(pMasqueradingVector[10]) ) {
                if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true) )
                    return false;
            } else {
                err="The " + pMasqueradingVector[10] + " column cannot be null";
                return false;
            }
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Ticket::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
    if(pJson.isMember("id") ) {
        if(!validJsonOfField(0, "id", pJson["id"], err, false) )
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title") ) {
        if(!validJsonOfField(1, "title", pJson["title"], err, false) )
            return false;
    }
    if(pJson.isMember("description") ) {
        if(!validJsonOfField(2, "description", pJson["description"], err, false) )
            return false;
    }
    if(pJson.isMember("status") ) {
        if(!validJsonOfField(3, "status", pJson["status"], err, false) )
            return false;
    }
    if(pJson.isMember("severity") ) {
        if(!validJsonOfField(4, "severity", pJson["severity"], err, false) )
            return false;
    }
    if(pJson.isMember("created_date") ) {
        if(!validJsonOfField(5, "created_date", pJson["created_date"], err, false) )
            return false;
    }
    if(pJson.isMember("resolved_date") ) {
        if(!validJsonOfField(6, "resolved_date", pJson["resolved_date"], err, false) )
            return false;
    }
    if(pJson.isMember("image_filename") ) {
        if(!validJsonOfField(7, "image_filename", pJson["image_filename"], err, false) )
            return false;
    }
    if(pJson.isMember("reporter_id") ) {
        if(!validJsonOfField(8, "reporter_id", pJson["reporter_id"], err, false) )
            return false;
    }
    if(pJson.isMember("assigned_id") ) {
        if(!validJsonOfField(9, "assigned_id", pJson["assigned_id"], err, false) )
            return false;
    }
    if(pJson.isMember("project_id") ) {
        if(!validJsonOfField(10, "project_id", pJson["project_id"], err, false) )
            return false;
    }
    return true;
}

bool Ticket::validateMasqueradedJsonForUpdate(const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector,
        std::string& err)
{
    if(pMasqueradingVector.size() != 11) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]) ) {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false) )
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]) ) {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]) ) {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]) ) {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]) ) {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]) ) {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]) ) {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]) ) {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]) ) {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]) ) {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false) )
                return false;
        }
        if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]) ) {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false) )
                return false;
        }
    }catch(const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}

bool Ticket::validJsonOfField(size_t index,
        const std::string& fieldName,
        const Json::Value& pJson,
        std::string& err,
        bool isForCreation)
{
    switch(index) {
    case 0:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(isForCreation) {
            err="The automatic primary key cannot be set";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 1:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 2:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 3:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 4:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 5:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 6:
        if(pJson.isNull() )
            return true;
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 7:
        if(pJson.isNull() )
            return true;
        if(!pJson.isString() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 8:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 9:
        if(pJson.isNull() )
            return true;
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    case 10:
        if(pJson.isNull() ) {
            err="The " + fieldName + " column cannot be null";
            return false;
        }
        if(!pJson.isInt() ) {
            err="Type error in the "+fieldName+" field";
            return false;
        }
        break;
    default:
        err="Internal error in the server";
        return false;
        break;
    }
    return true;
}

void Ticket::getProject(const DbClientPtr& clientPtr,
        const std::function<void(Project)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from project where id = $1";
    *clientPtr << sql
               << *projectId_
        >>[rcb = std::move(rcb), ecb](const Result& r){
        if(r.size() == 0)
            ecb(UnexpectedRows("0 rows found") );
        else if(r.size() > 1)
            ecb(UnexpectedRows("Found more than one row") );
        else
            rcb(Project(r[0]) );
        }
        >> ecb;
}

void Ticket::getComments(const DbClientPtr& clientPtr,
        const std::function<void(std::vector<Comment>)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from comment where poster_id = $1";
    *clientPtr << sql
               << *id_
        >>[rcb = std::move(rcb)](const Result& r){
        std::vector<Comment> ret;
        ret.reserve(r.size() );
        for(auto const& row : r)
            ret.emplace_back(Comment(row) );
        rcb(ret);
        }
        >> ecb;
}

void Ticket::getReporter(const DbClientPtr& clientPtr,
        const std::function<void(Account)>& rcb,
        const ExceptionCallback& ecb) const
{
    const static std::string sql = "select * from account where id = $1";
    *clientPtr << sql
               << *reporterId_
        >>[rcb = std::move(rcb), ecb](const Result& r){
        if(r.size() == 0)
            ecb(UnexpectedRows("0 rows found") );
        else if(r.size() > 1)
            ecb(UnexpectedRows("Found more than one row") );
        else
            rcb(Account(r[0]) );
        }
        >> ecb;
}
